name: Yad2 Haifa Property Monitor

on:
  schedule:
    # Run every 10 minutes
    - cron: '*/10 * * * *'
    # Daily status report at 9 AM Israel time (6 AM UTC)
    - cron: '0 6 * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  monitor:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Allow the action to push back to the repository
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Download previous database from repository
      run: |
        echo "üîç Looking for previous database in repository..."
        if [ -f "database/yad2_properties.db" ]; then
          echo "‚úÖ Found database in repository"
          cp database/yad2_properties.db yad2_properties.db
        elif [ -f "github_yad2_properties.db" ]; then
          echo "üîÑ Using GitHub baseline database as starting point"
          cp github_yad2_properties.db yad2_properties.db
        else
          echo "üÜï Starting with empty database"
        fi
      
    - name: Check database status
      run: |
        echo "üîç Final database status..."
        if [ -f "yad2_properties.db" ]; then
          echo "‚úÖ Working database ready"
          sqlite3 yad2_properties.db "SELECT COUNT(*) as count FROM properties;" || echo "Database query failed"
        else
          echo "üÜï No database - will create new one"
        fi
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Advanced Yad2 monitor with GitHub persistence
      env:
        GMAIL_EMAIL: ${{ secrets.GMAIL_EMAIL }}
        GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
        EMAIL_RECIPIENT_1: ${{ secrets.EMAIL_RECIPIENT_1 }}
        EMAIL_RECIPIENT_2: ${{ secrets.EMAIL_RECIPIENT_2 }}
      run: |
        echo "üè† Starting GitHub Advanced Yad2 monitoring with persistence..."
        python github_advanced_monitor.py
        
    - name: Save database to repository
      run: |
        echo "üíæ Saving database to repository..."
        mkdir -p database
        if [ -f "yad2_properties.db" ]; then
          cp yad2_properties.db database/yad2_properties.db
          echo "‚úÖ Database saved to repository"
          
          # Configure git with token authentication
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          
          # Always commit the database (SQLite has internal changes even with same data)
          git add database/yad2_properties.db
          
          # Check if there are any changes to commit
          if git diff --cached --quiet; then
            echo "üìä No database changes to commit"
          else
            git commit -m "üîÑ Update database from monitoring run $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            git push origin main && echo "‚úÖ Database changes committed and pushed" || echo "‚ö†Ô∏è Push failed - continuing anyway"
          fi
        else
          echo "‚ö†Ô∏è No database file to save"
        fi
        
    - name: Send daily status (if scheduled)
      if: github.event.schedule == '0 6 * * *'
      env:
        GMAIL_EMAIL: ${{ secrets.GMAIL_EMAIL }}
        GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
        EMAIL_RECIPIENT_1: ${{ secrets.EMAIL_RECIPIENT_1 }}
        EMAIL_RECIPIENT_2: ${{ secrets.EMAIL_RECIPIENT_2 }}
      run: |
        echo "üìä Sending daily status report..."
        python status_reporter.py